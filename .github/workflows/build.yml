name: WireGuard Android Build Pipeline
on:
  schedule:
    - cron: '0 12 * * *'  # Daily builds at 12:00 UTC
  repository_dispatch:
    types: [source_updated]
  push:
    branches: [main]
  workflow_dispatch:

jobs:
  build-binaries:
    runs-on: ubuntu-latest
    steps:
    - name: Checkout repository
      uses: actions/checkout@v4
      with:
        fetch-depth: 0
      
    - name: Setup build environment
      run: |
        sudo apt-get update
        sudo apt-get install -y build-essential git gcc-aarch64-linux-gnu golang-go jq
        
    # Check if WireGuard sources have updated
    - name: Check source updates
      id: check-sources
      run: |
        # Get latest commit from WireGuard sources
        tools_commit=$(curl -s https://api.github.com/repos/WireGuard/wireguard-tools/commits | jq -r '.[0].sha')
        go_commit=$(curl -s https://api.github.com/repos/WireGuard/wireguard-go/commits | jq -r '.[0].sha')
        
        # Check against last known commits
        if [ -f "last_commits.txt" ]; then
          last_tools_commit=$(grep tools last_commits.txt | cut -d':' -f2)
          last_go_commit=$(grep go last_commits.txt | cut -d':' -f2)
        else
          last_tools_commit=""
          last_go_commit=""
        fi
        
        # Set outputs and update commit records
        if [ "$tools_commit" != "$last_tools_commit" ] || [ "$go_commit" != "$last_go_commit" ]; then
          echo "tools:${tools_commit}" > last_commits.txt
          echo "go:${go_commit}" >> last_commits.txt
          echo "should_build=true" >> $GITHUB_OUTPUT
        else
          echo "should_build=false" >> $GITHUB_OUTPUT
        fi
        
    # Skip build if no updates (except for manual triggers)
    - name: Skip build if no updates
      if: ${{ steps.check-sources.outputs.should_build == 'false' && github.event_name != 'workflow_dispatch' }}
      run: |
        echo "No source updates - skipping build"
        exit 1
        
    # Build steps remain the same as before...
    - name: Clone WireGuard sources
      run: |
        git clone --depth 1 https://git.zx2c4.com/wireguard-tools
        git clone --depth 1 https://git.zx2c4.com/wireguard-go
        
    - name: Build wireguard-tools (wg, wg-quick)
      run: |
        cd wireguard-tools/src
        make CC="aarch64-linux-gnu-gcc" LDFLAGS="-static" -j$(nproc)
        
    - name: Build wireguard-go
      run: |
        cd wireguard-go
        GOOS=linux GOARCH=arm64 CGO_ENABLED=0 go build -ldflags="-s -w" -o wireguard-go
        
    - name: Prepare artifacts
      run: |
        mkdir -p artifacts
        cp wireguard-tools/src/wg artifacts/
        cp wireguard-tools/src/wg-quick/linux.bash artifacts/wg-quick
        cp wireguard-go/wireguard-go artifacts/
        chmod +x artifacts/*
        echo "Built on $(date -u)" > artifacts/build-info.txt
        
    - name: Upload binaries
      uses: actions/upload-artifact@v4
      with:
        name: wireguard-android-binaries
        path: artifacts/
        
    # Create GitHub Release
    - name: Create Release
      id: create_release
      uses: actions/create-release@v1
      env:
        GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
      with:
        tag_name: build-${{ github.run_id }}
        release_name: "WireGuard Android Build - $(date +'%Y-%m-%d')"
        body: |
          Automatic build of WireGuard tools for Android ARM64
          - Built from latest sources
          - Static binaries (no dependencies)
          - Userspace implementation
        draft: false
        prerelease: false
        
    - name: Upload Release Asset
      uses: actions/upload-release-asset@v1
      env:
        GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
      with:
        upload_url: ${{ steps.create_release.outputs.upload_url }}
        asset_path: ./artifacts/
        asset_name: wireguard-android-arm64.zip
        asset_content_type: application/zip
        
    - name: Update build timestamp
      env:
        GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
      run: |
        echo "$(date -u '+%Y-%m-%d %H:%M:%S UTC')" > last_build.txt
        git config user.name "GitHub Actions"
        git config user.email "actions@users.noreply.github.com"
        git add last_build.txt
        git commit -m "Update build timestamp"
        git push